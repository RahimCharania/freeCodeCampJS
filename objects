Objects are similar to arrays, 
except that instead of using indexes to access and modify their data, 
you access the data in objects through what are called properties.


useful for storing data in a structured way


you can also use numbers as properties. 
You can even omit the quotes for single-word string properties, as follows:

var anotherObject = {
  make: "Ford",
  5: "five",
  "model": "focus"
};


However, if your object has any non-string properties, JavaScript will automatically typecast them as strings.

There are two ways to access the properties of an object: 
dot notation (.) and bracket notation ([]), similar to an array.

//Dot notation is what you use when you know the name of the property you're trying to access ahead of time.//

Here is a sample of using dot notation (.) to read an object's property:

var myObj = {
  prop1: "val1",
  prop2: "val2"
};
var prop1val = myObj.prop1; // val1
var prop2val = myObj.prop2; // val2


you can add or remove or modify properties of objects without actually chanign the entre object.

//////////////////////

key value
Objects can be thought of as a key/value storage,
If you have tabular data, you can use an object to "lookup" values rather than a switch statement or an if/else chain



.hasOwnProperty(propname)--> check if the property of a given object exists or not


Objects hold data in a property, which has a key-value format. 
"artist": "Daft Punk" --> is a property that has a key of "artist" and a value of "Daft Punk".



flexible DS:js object--> handling flexible data
They allow for arbitrary combinations of strings, numbers, booleans, arrays, functions, and objects.




JSON--> related data interchange format used to store data


